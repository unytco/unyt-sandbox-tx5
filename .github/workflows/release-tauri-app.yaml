name: "release-tauri-app"
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  PRODUCT_NAME: "Unyt-tx5"
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  publish-happ:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    outputs:
      releaseId: ${{ steps.create-release.outputs.id }}
      appVersion: ${{ steps.version.outputs.APP_VERSION }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # Checks out a copy of your repository on the ubuntu-latest machine
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_PAT }}
          submodules: recursive
          fetch-depth: 0
      - name: Install nix
        uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GIT_PAT }}
          nix_path: nixpkgs=channel:nixos-24.05

      - uses: cachix/cachix-action@v15
        with:
          name: holochain-ci

      - uses: cachix/cachix-action@v15
        with:
          name: darksoil-studio

      - name: Install and test
        run: |
          nix-store --gc
          nix develop --no-update-lock-file --accept-flake-config --command bash -c "make package"

      - name: Retrieve version
        run: |
          echo "APP_VERSION=$(cat src-tauri/tauri.conf.json | grep -oP '(?<="version": ")[^"]*')" >> $GITHUB_OUTPUT
        id: version

      - name: Get Changelog Content
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.APP_VERSION }}"
          awk -v ver="$VERSION" '
            $0 ~ "^## \\[" ver "\\]" {p=1; next}
            p && /^## \[/ {exit}
            p {print}
          ' CHANGELOG.md > release_notes.txt
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - id: create-release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: |
            unyt/workdir/unyt.happ
            unyt/workdir/unyt.webhapp
            unyt/dnas/alliance/workdir/alliance.dna
            unyt/dnas/agent_details/workdir/agent_details.dna
          body: ${{ steps.changelog.outputs.notes }}
          name: ${{ env.PRODUCT_NAME }} v${{ steps.version.outputs.APP_VERSION }}
          tag: v${{ steps.version.outputs.APP_VERSION }}
          prerelease: true
          draft: true

  release-tauri-app:
    needs: publish-happ
    strategy:
      fail-fast: false
      matrix:
        include:
          # Default Arc versions (use Holochain default)
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
            arc_mode: "default"
            arc_factor: "default"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
            arc_mode: "default"
            arc_factor: "default"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: "--bundles deb,appimage"
            arc_mode: "default"
            arc_factor: "default"
          - platform: "windows-latest"
            args: ""
            arc_mode: "default"
            arc_factor: "default"
          # Zero Arc versions
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
            arc_mode: "zero"
            arc_factor: "0"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
            arc_mode: "zero"
            arc_factor: "0"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: "--bundles deb,appimage"
            arc_mode: "zero"
            arc_factor: "0"
          - platform: "windows-latest"
            args: ""
            arc_mode: "zero"
            arc_factor: "0"
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.13
      HOLOCHAIN_ARC_FACTOR: ${{ matrix.arc_factor != 'default' && matrix.arc_factor || '' }}
    permissions: write-all

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Support longpaths
        if: matrix.platform != 'ubuntu-22.04'
        run: git config --system core.longpaths true

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # Checks out a copy of your repository on the ubuntu-latest machine
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_PAT }}
          submodules: recursive
          fetch-depth: 0
      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 20

      - name: install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          override: true
          toolchain: 1.88.0

      - name: install Go stable
        uses: actions/setup-go@v4
        with:
          go-version: "stable"

      - name: install x86_64 target
        if: matrix.args == '--target x86_64-apple-darwin'
        run: rustup target add x86_64-apple-darwin

      - name: install wasm32-unknown-unknown target
        run: rustup target add wasm32-unknown-unknown

      - name: install Go stable
        uses: actions/setup-go@v4
        with:
          go-version: "stable"

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            javascriptcoregtk-4.1 \
            libsoup-3.0 \
            webkit2gtk-4.1

      - name: Install jq on Windows
        if: runner.os == 'Windows'
        run: choco install -y jq

      - name: Retrieve version
        shell: bash
        run: |
          echo "APP_VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)" >> $GITHUB_OUTPUT
        id: version

      - name: Install and prepare
        run: |
          yarn install

      - name: Download release of the .happ
        uses: robinraju/release-downloader@v1.10
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_PAT }}
        with:
          token: ${{ secrets.GIT_PAT }}
          releaseId: ${{ needs.publish-happ.outputs.releaseId }}
          fileName: "unyt.happ"
          out-file-path: "workdir/"

      - name: build the app (${{ matrix.arc_mode }} arc)
        uses: tauri-apps/tauri-action@v0
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_DEV_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID_EMAIL }}
          APPLE_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GIT_PAT }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          VITE_COMMIT_SHA: ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.APP_VERSION }}-tx5-${{ matrix.arc_factor }} # this is the tag that will be added to sentry
          APP_VERSION: ${{ steps.version.outputs.APP_VERSION }}
          HOLOCHAIN_ARC_FACTOR: ${{ matrix.arc_factor != 'default' && matrix.arc_factor || '' }}
          # VITE_IS_RIDESHARE_RELEASE: "true"
          VITE_APP_NAME: "Circulo"
          VITE_IS_CIRCULO_RELEASE: "true"
        with:
          releaseId: ${{ needs.publish-happ.outputs.releaseId }}
          releaseDraft: true
          includeUpdaterJson: ${{ matrix.arc_mode == 'default' && false || true }} # Upload updater JSON for zero arc
          updaterJsonPreferNsis: true
          prerelease: true
          args: ${{ matrix.args }}
          assetNamePattern: ${{ matrix.arc_mode == 'default' && '[name]_[version]_[arch]_[platform][ext]' || format('[name]_{0}-arc_[version]_[arch]_[platform][ext]', matrix.arc_mode) }}

  # release-tauri-android-app:
  #   needs: publish-happ
  #   permissions: write-all

  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Maximize build space
  #       uses: AdityaGarg8/remove-unwanted-software@v5
  #       with:
  #         remove-android: "true"
  #         remove-dotnet: "true"
  #         remove-haskell: "true"
  #         remove-codeql: "true"
  #         remove-docker-images: "true"
  #         remove-large-packages: "true"
  #         remove-cached-tools: "true"

  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     # Checks out a copy of your repository on the ubuntu-latest machine
  #     - uses: actions/checkout@v3
  #       with:
  #         token: ${{ secrets.GIT_PAT }}
  #         submodules: recursive
  #         fetch-depth: 0

  #     - name: install Rust stable
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         override: true
  #         toolchain: 1.88.0

  #     - name: install Go stable
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "stable"

  #     - name: Install nix
  #       uses: cachix/install-nix-action@v27
  #       with:
  #         github_access_token: ${{ secrets.GIT_PAT }}
  #         nix_path: nixpkgs=channel:nixos-24.05

  #     - uses: cachix/cachix-action@v15
  #       with:
  #         name: holochain-ci

  #     - uses: cachix/cachix-action@v15
  #       with:
  #         name: darksoil-studio

  #     - name: Download release of the .happ
  #       uses: robinraju/release-downloader@v1.10
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GIT_PAT }}
  #       with:
  #         token: ${{ secrets.GIT_PAT }}
  #         releaseId: ${{ needs.publish-happ.outputs.releaseId }}
  #         fileName: "unyt.happ"
  #         out-file-path: "workdir/"

  #     - name: Retrieve version
  #       run: |
  #         echo "APP_VERSION=$(cat src-tauri/tauri.conf.json | grep -oP '(?<="version": ")[^"]*')" >> $GITHUB_OUTPUT
  #       id: version

  #     - name: setup Android signing
  #       run: |
  #         cd src-tauri/gen/android
  #         echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > key.properties
  #         echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> key.properties
  #         base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
  #         echo "storeFile=$RUNNER_TEMP/keystore.jks" >> key.properties

  #     - name: Install and Build 🔧 (zero arc)
  #       env:
  #         VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  #         VITE_COMMIT_SHA: ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.APP_VERSION }}-tx5-${{ matrix.arc_factor }} # this is the tag that will be added to sentry
  #         APP_VERSION: ${{ steps.version.outputs.APP_VERSION }}
  #         HOLOCHAIN_ARC_FACTOR: "0"
  #         # VITE_APP_NAME: "Circulo"
  #         # VITE_IS_CIRCULO_RELEASE: "true"
  #         VITE_IS_RIDESHARE_RELEASE: "true"
  #       run: |
  #         nix develop --accept-flake-config .#androidDev --command bash -c "make build-android-release"

  #     - name: Upload release aab
  #       uses: AButler/upload-release-assets@v3.0
  #       with:
  #         files: src-tauri/gen/android/app/build/outputs/bundle/**/*.aab
  #         repo-token: ${{ secrets.GIT_PAT }}
  #         release-id: ${{ needs.publish-happ.outputs.releaseId }}

  #     - name: Upload release apk
  #       uses: AButler/upload-release-assets@v3.0
  #       with:
  #         files: src-tauri/gen/android/app/build/outputs/apk/**/**/*.apk
  #         repo-token: ${{ secrets.GIT_PAT }}
  #         release-id: ${{ needs.publish-happ.outputs.releaseId }}
